-- What?
+ Guards is authentication for an web platform
+ Self can access to a request to route handler, and next() request which control by middleware
(This is diferrence Guards and middleware, middleware it will don't know handler which excuted 
after call next()) and Guard can access to ExcutionContext of next function.

-- How?
+ We can design and implement a guard as a injectable()
+ For example: 
import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';
import { Observable } from 'rxjs';

@Injectable()
export class RolesGuard implements CanActivate {
  canActivate(
    context: ExecutionContext,
  ): boolean | Promise<boolean> | Observable<boolean> {
    return true;
  }
}

-- Binding?
+ Like pipes, exception filters -> guard can used as a decorator 
for scopeds (controller scope, method scope, global scope) 

-- Excute folow:
client -> request -> middleware -> guard -> intercepter -> filter

*** Remember: Guards excute after all middleware, and excute before all intercepter and filters
